package io.metamorphic.fileservices;

/**
 *
 * lineTerminator specifies the character sequence which should
 *   terminate rows.
 *
 * quoting controls when quotes should be generated by the writer.
 *   It can take on any of the following module constants:
 *
 *   QUOTE_MINIMAL means only when required, for example, when a
 *     field contains either the quotechar or the delimiter
 *   QUOTE_ALL means that quotes are always placed around fields.
 *   QUOTE_NONNUMERIC means that quotes are always placed around
 *     fields which do not parse as integers or floating point
 *     numbers.
 *   QUOTE_NONE means that quotes are never placed around fields.
 *
 * doubleQuoted controls the handling of quotes inside fields.  When
 *   True, two consecutive quotes are interpreted as one during read,
 *   and when writing, each quote character embedded in the data is
 *   written as two quotes
 *
 * delimiter specifies a string to use as the column separator.
 *
 * quoteChar specifies a one-character string to use as the
 *   quoting character.  It defaults to '"'.
 *
 * skipInitialSpace specifies how to interpret whitespace which
 *   immediately follows a delimiter.  It defaults to False, which
 *   means that whitespace immediately following a delimiter is part
 *   of the following field.
 *
 * escapeChar specifies a one-character string used to escape
 *   the delimiter when quoting is set to QUOTE_NONE.
 *
 * Created by markmo on 5/04/15.
 */
public class FileParameters {

    enum QUOTING {
        QUOTE_MINIMAL,
        QUOTE_ALL,
        QUOTE_NONNUMERIC,
        QUOTE_NONE
    }

    private String textQualifier;
    private boolean doubleQuoted;
    private String columnDelimiter;
    private boolean skipInitialSpace;
    private boolean header;
    private String lineTerminator;
    private QUOTING quoting;
    private Character escapeCharacter;

    public FileParameters() {
        this.textQualifier = "\"";
        this.doubleQuoted = false;
        this.columnDelimiter = "";
        this.skipInitialSpace = false;
        this.header = false;
        this.lineTerminator = "\\r\\n";
        this.quoting = QUOTING.QUOTE_MINIMAL;
        this.escapeCharacter = '\\';
    }

    public FileParameters(String textQualifier, boolean doubleQuoted, String columnDelimiter, boolean skipInitialSpace) {
        this();
        this.textQualifier = textQualifier;
        this.doubleQuoted = doubleQuoted;
        this.columnDelimiter = columnDelimiter;
        this.skipInitialSpace = skipInitialSpace;
    }

    public FileParameters(String columnDelimiter, boolean skipInitialSpace) {
        this();
        this.textQualifier = "";
        this.doubleQuoted = false;
        this.columnDelimiter = columnDelimiter;
        this.skipInitialSpace = skipInitialSpace;
    }

    public String getTextQualifier() {
        return textQualifier;
    }

    public void setTextQualifier(String textQualifier) {
        this.textQualifier = textQualifier;
    }

    public boolean isDoubleQuoted() {
        return doubleQuoted;
    }

    public void setDoubleQuoted(boolean doubleQuoted) {
        this.doubleQuoted = doubleQuoted;
    }

    public String getColumnDelimiter() {
        return columnDelimiter;
    }

    public void setColumnDelimiter(String columnDelimiter) {
        this.columnDelimiter = columnDelimiter;
    }

    public boolean isSkipInitialSpace() {
        return skipInitialSpace;
    }

    public void setSkipInitialSpace(boolean skipInitialSpace) {
        this.skipInitialSpace = skipInitialSpace;
    }

    public boolean hasHeader() {
        return header;
    }

    public boolean isHeader() {
        return header;
    }

    public void setHeader(boolean header) {
        this.header = header;
    }

    public String getLineTerminator() {
        return lineTerminator;
    }

    public void setLineTerminator(String lineTerminator) {
        this.lineTerminator = lineTerminator;
    }

    public QUOTING getQuoting() {
        return quoting;
    }

    public void setQuoting(QUOTING quoting) {
        this.quoting = quoting;
    }

    public Character getEscapeCharacter() {
        return escapeCharacter;
    }

    public void setEscapeCharacter(Character escapeCharacter) {
        this.escapeCharacter = escapeCharacter;
    }
}
